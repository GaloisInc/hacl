import "AES.cry";

let {{
  aesExtract x = aesEncrypt (pt,key)
    // This input transform is specific to the SAW backend.
    // See ':/intTests/test0017_lss_aig' for discussion of
    // the IO encodings for different backends.
    where [pt,key] = split x
}};

let main = do {
  m <- llvm_load_module "aes.bc";

  key <- fresh_symbolic "key" {| [4][32] |};
  pt <- fresh_symbolic "pt" {| [4][32] |};
  let allocs = [("pt", 4), ("key", 4), ("ct", 4)];
  let inputs = [("*pt", pt, 4), ("*key", key, 4), ("*ct", {{ zero : [4][32] }}, 4)];
  let outputs = [("*ct", 4)];

  print "Doing symbolic execution (w/o SAT)";
  aesLLVM <- time (llvm_symexec m "aes128BlockEncrypt" allocs inputs outputs false);
  aesLLVMFn <- abstract_symbolic aesLLVM;
  let {{ aesLLVMFlat x = join (aesLLVMFn (split k) (split p))
           where [(p:[128]), (k:[128])] = split x
      }};

  print "Doing symbolic execution (w/ SAT)";
  aesLLVM2 <- time (llvm_symexec m "aes128BlockEncrypt" allocs inputs outputs true);
  aesLLVMFn2 <- abstract_symbolic aesLLVM2;
  let {{ aesLLVMFlat2 x = join (aesLLVMFn2 (split k) (split p))
           where [(p:[128]), (k:[128])] = split x
      }};

  print "Term sizes (Cryptol)";
  print (term_size {{ aesExtract }});
  print (term_tree_size {{ aesExtract }});

  print "Term sizes (LLVM w/o SAT)";
  print (term_size {{ aesLLVMFlat }});
  print (term_tree_size {{ aesLLVMFlat }});

  print "Term sizes (LLVM w/ SAT)";
  print (term_size {{ aesLLVMFlat2 }});
  print (term_tree_size {{ aesLLVMFlat2 }});

  print "Bitblasting LLVM implementation";
  f <- time (bitblast {{ aesLLVMFlat }});

  print "Bitblasting Cryptol implementation";
  g <- time (bitblast {{ aesExtract }});

  print "Checking equivalence";
  res <- time (cec f g);
  print res;
};
